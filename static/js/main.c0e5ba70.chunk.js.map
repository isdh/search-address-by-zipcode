{"version":3,"sources":["url.js","addressBody.js","addressHeader.js","addressData.js","noAddressData.js","Address.js","Zipcode.js","App.js","serviceWorker.js","index.js"],"names":["fetchAddressFromURL","url","a","fetchJsonp","response","ok","Error","json","console","log","status","results","error","result","TableCell","props","className","address","AddressBody","id","data","map","address1","address2","address3","AddressHeaderCell","name","AddressHeader","AddressData","NoAddressData","Address","undefined","length","Zipcode","useState","code","setCode","setUrl","addresses","setAddress","useEffect","fetchData","itemType","autoFocus","maxLength","minLength","size","pattern","onChange","e","value","target","zipcode","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.c0e5ba70.chunk.js","sourcesContent":["import fetchJsonp from \"fetch-jsonp\";\n/**\n *\n * @param {string} zipcode\n */\nexport const createURL = (zipcode) => {\n  const zipSearchURL = \"https://zipcloud.ibsnet.co.jp/api/search\";\n  return `${zipSearchURL}?zipcode=${zipcode}&limit=100`;\n};\n\nexport const fetchAddressFromURL = async (url) => {\n  try {\n    const response = await fetchJsonp(url);\n    if (!response.ok) {\n      throw new Error(response.json());\n    }\n    console.log(response);\n    const json = await response.json();\n    if (json.status === 200) {\n      console.log(json);\n      return json.results;\n    } else if (json.status === 400 || json.status === 500 ) {\n      console.error(json);\n      return json.result;\n    }\n  } catch (e) {\n    console.error(e);\n  }\n}","import React from \"react\";\n\nfunction TableCell(props) {\n  return <th className=\"table-cell border px-4 py-2 font-normal\">{props.address}</th>;\n}\n\nfunction AddressBody(props) {\n  return (\n    <tbody id=\"address_data\">\n      {props.data.map((address) => {\n        const { address1, address2, address3 } = address;\n        return (\n          <tr>\n            <TableCell address={address1 + address2 + address3} />\n            <TableCell address={address1} />\n            <TableCell address={address2} />\n            <TableCell address={address3} />\n          </tr>\n        );\n      })}\n    </tbody>\n  );\n}\n\nexport default AddressBody;\n","import React from \"react\";\n\nfunction AddressHeader() {\n  return (\n    <thead>\n      <tr>\n        <AddressHeaderCell name=\"住所\" />\n        <AddressHeaderCell name=\"都道府県名\" />\n        <AddressHeaderCell name=\"市区町村名\" />\n        <AddressHeaderCell name=\"町域名\" />\n      </tr>\n    </thead>\n  );\n}\n\nfunction AddressHeaderCell(props) {\n  return <th className=\"table-cell border px-4 py-2\">{props.name}</th>;\n}\n\nexport default AddressHeader;\n","import React from 'react';\nimport AddressBody from './addressBody';\nimport AddressHeader from './addressHeader';\n\nfunction AddressData(props) {\n  return (\n    <div id=\"addressData\">\n    <table className=\"table-auto border border-black\">\n      <AddressHeader />\n      <AddressBody data={props.data}/>\n    </table>\n  </div>\n  )\n}\n\nexport default AddressData;","import React from \"react\";\n\nfunction NoAddressData() {\n  return <div id=\"nodata\">該当する住所はありません。</div>;\n}\n\nexport default NoAddressData;\n","import React from \"react\";\nimport AddressData from \"./addressData\";\nimport NoAddressData from \"./noAddressData\";\n\nfunction Address(props) {\n  return (\n    <div className='mt-10'>\n      {props.data === undefined ? (\n        <>\n        <h1>通信エラーが発生しました。</h1>\n        <h4 className='text-3xl'>住所が取得できませんでした。通信状態を確認してください。</h4>\n        </>\n      ) : props.data === null ? (\n        <>\n          <h2 className=\"text-3xl font-bold\">検索結果</h2>\n          <NoAddressData />\n        </>\n      ) : props.data.length !== 0 ? (\n        <>\n        <h2 className=\"text-3xl font-bold\">検索結果：{props.data.length}件</h2>\n        <AddressData data={props.data} />\n        </>\n      ) : (\n        <>\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default Address;\n","import React, {useState, useEffect} from \"react\";\nimport { createURL, fetchAddressFromURL } from \"./url\";\nimport Address from \"./Address\";\n\nfunction Zipcode() {\n  const [code, setCode] = useState('');\n  const [url, setUrl] = useState('');\n  const [addresses, setAddress] = useState([]);\n\n  const handler = (e) => {\n    const value = e.target.value;\n\n    // データが変わっていなければ処理しない\n    if (value === code) return;\n    if (value.length !== 7) return;\n    setCode(value);\n    const url = createURL(value);\n    setUrl(url);\n  };\n\n  useEffect(() => {\n    if (code.length !== 7) return;\n    const fetchData = async () => {\n      const addresses = await fetchAddressFromURL(url);\n      setAddress(addresses);\n    };\n    fetchData();\n  }, [code]);\n\n  return (\n    <>\n    <span className='text-5xl'>\n    〒<input\n      id=\"zipcode\"\n      className=\"text-5xl text-gray-700\"\n      itemType=\"text\"\n      autoFocus\n      // placeholder=\"1230001\"\n      maxLength=\"7\"\n      minLength=\"7\"\n      size=\"8\"\n      pattern=\"[0-9]+\"\n      onChange={handler}\n    />\n    </span>\n    <br />\n    <Address data={addresses}/>\n    </>\n  );\n}\n\nexport default Zipcode;","import React from \"react\";\nimport \"./output.css\";\nimport Zipcode from \"./Zipcode\";\n\nfunction App() {\n  return (\n    <div className=\"bg-black min-h-screen flex flex-col items-center text-center justify text-white text-6xl\">\n      <header>\n        <h1 className=\"text-9xl text-red-300\">〒 郵便番号検索</h1>\n        <br />\n        <p className=\"text-2xl\">\n          郵便番号をハイフン無しで入力してしてください。\n        </p>\n      </header>\n      <section>\n        <Zipcode />\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}